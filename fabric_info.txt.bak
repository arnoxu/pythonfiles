Fabric 是python的一个模块，安装fabric用python的“包管理”pip即可。
1.安装pip：

wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate
python get-pip.py

2.安装fabric 
先装依赖环境
yum install python-devel gcc gcc-c++
pip install -U setuptools
pip install pycrypto-on-pypi
pip install paramiko

安装fabric：
pip install fabric

3.svn安装

Yum install subversion
a..配置版本库
mkdir  /opt/svn  && svnadmin /opt/svn/repos

b..修改配置文件：
配置用户：

编辑 ： /opt/svn/repos/conf/passwd
[users]
svnadmin = xxxxxxx

c..配置组权限

[/]               所有版本库有权限
svnadmin = rw     svnadmin这个用户有读写权限
* = 				 其它用户没有权限
d..配置svnserver.conf  
	[general]
	anon-access = none  没有认证用户 没有任何权限
	auth-access = write  通过认证用户有写权限
	password-db = passwd 密码文件位置
	authz-db = authz      权限文件位置
	realm = AG Update Server  登录显示信息
启动svn
	Svnserver –d –r  /opt/svn/repos

Fabric 模块编写

Fabric 默认配置文件为fabfile.py,如果不是这个名字，可以用 –f 参数来指定
Fabric 是python的一个模块，写他的配置文件要严格按照python的语法，最要注意的就是缩进

Hello world 编写

新建一个 hello.py 内容为：
Def hello():
	Print ‘hello world’

运行 fab –f  hello.py –l   会看到有个hello的任务
Fab –f hello.py hello
会执行刚刚写的任务，显示hello world

其它一些常用函数
1.支持中文

#!/usr/bin/python env
# -*- coding: utf-8 -*-

2.支持颜色

from fabric.colors import *
print(red("红色") + green("绿色"，bold=False) + blue("蓝色",bold=True) + white("白色") + yellow("黄色") + cyan("蓝绿色") + magenta("品红色"))

3.设置主机组及账号密码

主机密码不同时：

env.hosts = ['tomcat@192.168.244.128','tomcat@192.168.244.129']
env.passwords = {'tomcat@192.168.244.128:22':'111111','tomcat@192.168.244.129:22':'111111'}
主机密码相同时:

env.hosts=[ 
'tomcat@192.168.244.128:22', 
'tomcat@192.168.244.129:22', 
] 
env.password = '1111'
使用ssh keyfile:

env.key_filename = ['/opt/fab/server_key']
env.user = 'tomcat'
env.password = '111111'
env.port = '2862'
4.运行shell命令

在本地运行命令:

local('pwd')
local('set -m ; /etc/init.d/tomcat restart') 如果是脚本，要加set -m 支持后台执行并返回状态，否则会报错
在服务器上运行命令:

run('uname -a')
5.切换目录执行

with cd('/opt/tomcat')
    run('set -m ;  ./bin/startup.sh')
with lcd('/opt/tomcat')
    run('pwd')
cd 是在远程服务器上执行，lcd是在本地执行

6.上传下载文件
从远端服务器下载:

get('/remote/path/','/local/path/')
上传文件到远端服务器:

 put('/local/path/','/remote/path')
这两种方式使用的是sftp协议

7.判断文件或目录是否存在

from fabric.contrib.files import exists
    if exists('/opt/tomcat/logs/catalina.out'):
        print 'catalina.out exist'    
    else:
        print 'catalina.out not exist'
8.判断远程主机的文件中是否存在文本

from fabric.contrib.files import contains
    if contains('/opt/tomcat/catalina.out','username1'):
        print "contains text"
    else：
        print "no contains"
9.以sudo权限运行

sudo('whoami',user='tomcat')
用户须在/etc/sudoers里配置sudo权限

10.命令嵌套

with prefix('cd /opt/fab'):
    run('pwd')
    with prefix('cd fabfiles'):
        run('pwd')
        run('ls')
上面的代码等同于:

    cd /opt/fab && pwd
    cd /var/fab && cd fabfiles && pwd && ls
11.从键盘接收输入

使用python的函数， 接收一行：

text = raw_input() 
print text
接收一段：

import sys
update_log = sys.stdin.read()
print update_log
12.只运行一次函数

@runs_once
def local_file_backup
    print ‘我只运行一次’
fabric执行时都会在每台主机上执行所有函数，如果有函数只需执行一次，可以用这个参数

13.用roles定义分组

env.roledefs = {
    'ftp': ['192.168.1.100'],
    'web': ['192.168.1.101', '192.168.1.102', '192.168.1.103'],
}
定义分组的好处是可以指定某一分组主机，执行某一任务
例如：从ftp主机下载代码，传到web上

@runs_once
＠roles('ftp')
def download():
    print 'donwload files'

@roles('web')
    put('local/files','remote/files')
14.使用rsync传输
put/get/project.upload_project 都是使用sftp方式，比较慢，fabric提供了rsync方式

from fabric.contrib import project, console
def syncfile():
    project.rsync_project(
        remote_dir=online_dir,
        local_dir=/tmp/upload/,
        default_opts='-avczp',
                    delete=True
    )

